// Code generated by counterfeiter. DO NOT EDIT.
package kubefakes

import (
	"sync"

	"github.com/plumming/chilly/pkg/kube"
	"k8s.io/client-go/tools/clientcmd/api"
)

type FakeKuber struct {
	LoadConfigStub        func() (*api.Config, error)
	loadConfigMutex       sync.RWMutex
	loadConfigArgsForCall []struct {
	}
	loadConfigReturns struct {
		result1 *api.Config
		result2 error
	}
	loadConfigReturnsOnCall map[int]struct {
		result1 *api.Config
		result2 error
	}
	SetKubeContextStub        func(string, *api.Config) (*api.Config, error)
	setKubeContextMutex       sync.RWMutex
	setKubeContextArgsForCall []struct {
		arg1 string
		arg2 *api.Config
	}
	setKubeContextReturns struct {
		result1 *api.Config
		result2 error
	}
	setKubeContextReturnsOnCall map[int]struct {
		result1 *api.Config
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeKuber) LoadConfig() (*api.Config, error) {
	fake.loadConfigMutex.Lock()
	ret, specificReturn := fake.loadConfigReturnsOnCall[len(fake.loadConfigArgsForCall)]
	fake.loadConfigArgsForCall = append(fake.loadConfigArgsForCall, struct {
	}{})
	fake.recordInvocation("LoadConfig", []interface{}{})
	fake.loadConfigMutex.Unlock()
	if fake.LoadConfigStub != nil {
		return fake.LoadConfigStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.loadConfigReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKuber) LoadConfigCallCount() int {
	fake.loadConfigMutex.RLock()
	defer fake.loadConfigMutex.RUnlock()
	return len(fake.loadConfigArgsForCall)
}

func (fake *FakeKuber) LoadConfigCalls(stub func() (*api.Config, error)) {
	fake.loadConfigMutex.Lock()
	defer fake.loadConfigMutex.Unlock()
	fake.LoadConfigStub = stub
}

func (fake *FakeKuber) LoadConfigReturns(result1 *api.Config, result2 error) {
	fake.loadConfigMutex.Lock()
	defer fake.loadConfigMutex.Unlock()
	fake.LoadConfigStub = nil
	fake.loadConfigReturns = struct {
		result1 *api.Config
		result2 error
	}{result1, result2}
}

func (fake *FakeKuber) LoadConfigReturnsOnCall(i int, result1 *api.Config, result2 error) {
	fake.loadConfigMutex.Lock()
	defer fake.loadConfigMutex.Unlock()
	fake.LoadConfigStub = nil
	if fake.loadConfigReturnsOnCall == nil {
		fake.loadConfigReturnsOnCall = make(map[int]struct {
			result1 *api.Config
			result2 error
		})
	}
	fake.loadConfigReturnsOnCall[i] = struct {
		result1 *api.Config
		result2 error
	}{result1, result2}
}

func (fake *FakeKuber) SetKubeContext(arg1 string, arg2 *api.Config) (*api.Config, error) {
	fake.setKubeContextMutex.Lock()
	ret, specificReturn := fake.setKubeContextReturnsOnCall[len(fake.setKubeContextArgsForCall)]
	fake.setKubeContextArgsForCall = append(fake.setKubeContextArgsForCall, struct {
		arg1 string
		arg2 *api.Config
	}{arg1, arg2})
	fake.recordInvocation("SetKubeContext", []interface{}{arg1, arg2})
	fake.setKubeContextMutex.Unlock()
	if fake.SetKubeContextStub != nil {
		return fake.SetKubeContextStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setKubeContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKuber) SetKubeContextCallCount() int {
	fake.setKubeContextMutex.RLock()
	defer fake.setKubeContextMutex.RUnlock()
	return len(fake.setKubeContextArgsForCall)
}

func (fake *FakeKuber) SetKubeContextCalls(stub func(string, *api.Config) (*api.Config, error)) {
	fake.setKubeContextMutex.Lock()
	defer fake.setKubeContextMutex.Unlock()
	fake.SetKubeContextStub = stub
}

func (fake *FakeKuber) SetKubeContextArgsForCall(i int) (string, *api.Config) {
	fake.setKubeContextMutex.RLock()
	defer fake.setKubeContextMutex.RUnlock()
	argsForCall := fake.setKubeContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeKuber) SetKubeContextReturns(result1 *api.Config, result2 error) {
	fake.setKubeContextMutex.Lock()
	defer fake.setKubeContextMutex.Unlock()
	fake.SetKubeContextStub = nil
	fake.setKubeContextReturns = struct {
		result1 *api.Config
		result2 error
	}{result1, result2}
}

func (fake *FakeKuber) SetKubeContextReturnsOnCall(i int, result1 *api.Config, result2 error) {
	fake.setKubeContextMutex.Lock()
	defer fake.setKubeContextMutex.Unlock()
	fake.SetKubeContextStub = nil
	if fake.setKubeContextReturnsOnCall == nil {
		fake.setKubeContextReturnsOnCall = make(map[int]struct {
			result1 *api.Config
			result2 error
		})
	}
	fake.setKubeContextReturnsOnCall[i] = struct {
		result1 *api.Config
		result2 error
	}{result1, result2}
}

func (fake *FakeKuber) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loadConfigMutex.RLock()
	defer fake.loadConfigMutex.RUnlock()
	fake.setKubeContextMutex.RLock()
	defer fake.setKubeContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeKuber) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kube.Kuber = new(FakeKuber)
